############################################################################
# Copyright(c) Open Law Library. All rights reserved.                      #
# See ThirdPartyNotices.txt in the project root for additional notices.    #
#                                                                          #
# Licensed under the Apache License, Version 2.0 (the "License")           #
# you may not use this file except in compliance with the License.         #
# You may obtain a copy of the License at                                  #
#                                                                          #
#     http: // www.apache.org/licenses/LICENSE-2.0                         #
#                                                                          #
# Unless required by applicable law or agreed to in writing, software      #
# distributed under the License is distributed on an "AS IS" BASIS,        #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
# See the License for the specific language governing permissions and      #
# limitations under the License.                                           #
############################################################################

# GENERATED FROM scripts/generate_code.py -- DO NOT EDIT
# flake8: noqa
from __future__ import annotations

from functools import reduce
import typing

if typing.TYPE_CHECKING:
    from lsprotocol import types
    from typing import Any
    from typing import Literal
    from typing import Sequence
    from typing import TypeVar
    from typing import Union

    T = TypeVar('T')

@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace'], default: T | None = None) -> types.WorkspaceClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.apply_edit'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.workspace_edit'], default: T | None = None) -> types.WorkspaceEditClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.workspace_edit.document_changes'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.workspace_edit.resource_operations'], default: T | None = None) -> Sequence[types.ResourceOperationKind] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.workspace_edit.failure_handling'], default: T | None = None) -> types.FailureHandlingKind | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.workspace_edit.normalizes_line_endings'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.workspace_edit.change_annotation_support'], default: T | None = None) -> types.ChangeAnnotationsSupportOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.workspace_edit.change_annotation_support.groups_on_label'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.workspace_edit.metadata_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.workspace_edit.snippet_edit_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.did_change_configuration'], default: T | None = None) -> types.DidChangeConfigurationClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.did_change_configuration.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.did_change_watched_files'], default: T | None = None) -> types.DidChangeWatchedFilesClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.did_change_watched_files.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.did_change_watched_files.relative_pattern_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.symbol'], default: T | None = None) -> types.WorkspaceSymbolClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.symbol.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.symbol.symbol_kind'], default: T | None = None) -> types.ClientSymbolKindOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.symbol.symbol_kind.value_set'], default: T | None = None) -> Sequence[types.SymbolKind] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.symbol.tag_support'], default: T | None = None) -> types.ClientSymbolTagOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.symbol.tag_support.value_set'], default: T | None = None) -> types.SymbolTag | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.symbol.resolve_support'], default: T | None = None) -> types.ClientSymbolResolveOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.symbol.resolve_support.properties'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.execute_command'], default: T | None = None) -> types.ExecuteCommandClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.execute_command.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.workspace_folders'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.configuration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.semantic_tokens'], default: T | None = None) -> types.SemanticTokensWorkspaceClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.semantic_tokens.refresh_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.code_lens'], default: T | None = None) -> types.CodeLensWorkspaceClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.code_lens.refresh_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.file_operations'], default: T | None = None) -> types.FileOperationClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.file_operations.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.file_operations.did_create'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.file_operations.will_create'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.file_operations.did_rename'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.file_operations.will_rename'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.file_operations.did_delete'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.file_operations.will_delete'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.inline_value'], default: T | None = None) -> types.InlineValueWorkspaceClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.inline_value.refresh_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.inlay_hint'], default: T | None = None) -> types.InlayHintWorkspaceClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.inlay_hint.refresh_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.diagnostics'], default: T | None = None) -> types.DiagnosticWorkspaceClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.diagnostics.refresh_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.folding_range'], default: T | None = None) -> types.FoldingRangeWorkspaceClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.folding_range.refresh_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.text_document_content'], default: T | None = None) -> types.TextDocumentContentClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['workspace.text_document_content.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document'], default: T | None = None) -> types.TextDocumentClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.synchronization'], default: T | None = None) -> types.TextDocumentSyncClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.synchronization.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.synchronization.will_save'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.synchronization.will_save_wait_until'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.synchronization.did_save'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.filters'], default: T | None = None) -> types.TextDocumentFilterClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.filters.relative_pattern_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion'], default: T | None = None) -> types.CompletionClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item'], default: T | None = None) -> types.ClientCompletionItemOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item.snippet_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item.commit_characters_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item.documentation_format'], default: T | None = None) -> Sequence[types.MarkupKind] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item.deprecated_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item.preselect_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item.tag_support'], default: T | None = None) -> types.CompletionItemTagOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item.tag_support.value_set'], default: T | None = None) -> types.CompletionItemTag | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item.insert_replace_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item.resolve_support'], default: T | None = None) -> types.ClientCompletionItemResolveOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item.resolve_support.properties'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item.insert_text_mode_support'], default: T | None = None) -> types.ClientCompletionItemInsertTextModeOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item.insert_text_mode_support.value_set'], default: T | None = None) -> types.InsertTextMode | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item.label_details_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item_kind'], default: T | None = None) -> types.ClientCompletionItemOptionsKind | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_item_kind.value_set'], default: T | None = None) -> Sequence[Union[types.CompletionItemKind, int]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.insert_text_mode'], default: T | None = None) -> types.InsertTextMode | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.context_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_list'], default: T | None = None) -> types.CompletionListCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_list.item_defaults'], default: T | None = None) -> Sequence[str] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.completion.completion_list.apply_kind_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.hover'], default: T | None = None) -> types.HoverClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.hover.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.hover.content_format'], default: T | None = None) -> Sequence[types.MarkupKind] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.signature_help'], default: T | None = None) -> types.SignatureHelpClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.signature_help.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.signature_help.signature_information'], default: T | None = None) -> types.ClientSignatureInformationOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.signature_help.signature_information.documentation_format'], default: T | None = None) -> Sequence[types.MarkupKind] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.signature_help.signature_information.parameter_information'], default: T | None = None) -> types.ClientSignatureParameterInformationOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.signature_help.signature_information.parameter_information.label_offset_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.signature_help.signature_information.active_parameter_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.signature_help.signature_information.no_active_parameter_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.signature_help.context_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.declaration'], default: T | None = None) -> types.DeclarationClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.declaration.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.declaration.link_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.definition'], default: T | None = None) -> types.DefinitionClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.definition.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.definition.link_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.type_definition'], default: T | None = None) -> types.TypeDefinitionClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.type_definition.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.type_definition.link_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.implementation'], default: T | None = None) -> types.ImplementationClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.implementation.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.implementation.link_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.references'], default: T | None = None) -> types.ReferenceClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.references.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.document_highlight'], default: T | None = None) -> types.DocumentHighlightClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.document_highlight.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.document_symbol'], default: T | None = None) -> types.DocumentSymbolClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.document_symbol.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.document_symbol.symbol_kind'], default: T | None = None) -> types.ClientSymbolKindOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.document_symbol.symbol_kind.value_set'], default: T | None = None) -> Sequence[types.SymbolKind] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.document_symbol.hierarchical_document_symbol_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.document_symbol.tag_support'], default: T | None = None) -> types.ClientSymbolTagOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.document_symbol.tag_support.value_set'], default: T | None = None) -> types.SymbolTag | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.document_symbol.label_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_action'], default: T | None = None) -> types.CodeActionClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_action.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_action.code_action_literal_support'], default: T | None = None) -> types.ClientCodeActionLiteralOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_action.code_action_literal_support.code_action_kind'], default: T | None = None) -> types.ClientCodeActionKindOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_action.code_action_literal_support.code_action_kind.value_set'], default: T | None = None) -> Union[types.CodeActionKind, str] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_action.is_preferred_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_action.disabled_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_action.data_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_action.resolve_support'], default: T | None = None) -> types.ClientCodeActionResolveOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_action.resolve_support.properties'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_action.honors_change_annotations'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_action.documentation_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_action.tag_support'], default: T | None = None) -> types.CodeActionTagOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_action.tag_support.value_set'], default: T | None = None) -> types.CodeActionTag | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_lens'], default: T | None = None) -> types.CodeLensClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_lens.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_lens.resolve_support'], default: T | None = None) -> types.ClientCodeLensResolveOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.code_lens.resolve_support.properties'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.document_link'], default: T | None = None) -> types.DocumentLinkClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.document_link.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.document_link.tooltip_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.color_provider'], default: T | None = None) -> types.DocumentColorClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.color_provider.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.formatting'], default: T | None = None) -> types.DocumentFormattingClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.formatting.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.range_formatting'], default: T | None = None) -> types.DocumentRangeFormattingClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.range_formatting.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.range_formatting.ranges_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.on_type_formatting'], default: T | None = None) -> types.DocumentOnTypeFormattingClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.on_type_formatting.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.rename'], default: T | None = None) -> types.RenameClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.rename.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.rename.prepare_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.rename.prepare_support_default_behavior'], default: T | None = None) -> types.PrepareSupportDefaultBehavior | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.rename.honors_change_annotations'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.folding_range'], default: T | None = None) -> types.FoldingRangeClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.folding_range.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.folding_range.range_limit'], default: T | None = None) -> None | int | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.folding_range.line_folding_only'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.folding_range.folding_range_kind'], default: T | None = None) -> types.ClientFoldingRangeKindOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.folding_range.folding_range_kind.value_set'], default: T | None = None) -> Sequence[Union[types.FoldingRangeKind, str]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.folding_range.folding_range'], default: T | None = None) -> types.ClientFoldingRangeOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.folding_range.folding_range.collapsed_text'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.selection_range'], default: T | None = None) -> types.SelectionRangeClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.selection_range.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.publish_diagnostics'], default: T | None = None) -> types.PublishDiagnosticsClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.publish_diagnostics.version_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.publish_diagnostics.related_information'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.publish_diagnostics.tag_support'], default: T | None = None) -> types.ClientDiagnosticsTagOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.publish_diagnostics.tag_support.value_set'], default: T | None = None) -> types.DiagnosticTag | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.publish_diagnostics.code_description_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.publish_diagnostics.data_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.call_hierarchy'], default: T | None = None) -> types.CallHierarchyClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.call_hierarchy.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.semantic_tokens'], default: T | None = None) -> types.SemanticTokensClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.semantic_tokens.requests'], default: T | None = None) -> types.ClientSemanticTokensRequestOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.semantic_tokens.requests.range'], default: T | None = None) -> bool | None | Any | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.semantic_tokens.requests.full'], default: T | None = None) -> types.ClientSemanticTokensRequestFullDelta | bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.semantic_tokens.requests.full.delta'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.semantic_tokens.token_types'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.semantic_tokens.token_modifiers'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.semantic_tokens.formats'], default: T | None = None) -> types.TokenFormat | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.semantic_tokens.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.semantic_tokens.overlapping_token_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.semantic_tokens.multiline_token_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.semantic_tokens.server_cancel_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.semantic_tokens.augments_syntax_tokens'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.linked_editing_range'], default: T | None = None) -> types.LinkedEditingRangeClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.linked_editing_range.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.moniker'], default: T | None = None) -> types.MonikerClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.moniker.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.type_hierarchy'], default: T | None = None) -> types.TypeHierarchyClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.type_hierarchy.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.inline_value'], default: T | None = None) -> types.InlineValueClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.inline_value.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.inlay_hint'], default: T | None = None) -> types.InlayHintClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.inlay_hint.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.inlay_hint.resolve_support'], default: T | None = None) -> types.ClientInlayHintResolveOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.inlay_hint.resolve_support.properties'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.diagnostic'], default: T | None = None) -> types.DiagnosticClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.diagnostic.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.diagnostic.related_document_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.diagnostic.related_information'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.diagnostic.tag_support'], default: T | None = None) -> types.ClientDiagnosticsTagOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.diagnostic.tag_support.value_set'], default: T | None = None) -> types.DiagnosticTag | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.diagnostic.code_description_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.diagnostic.data_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.inline_completion'], default: T | None = None) -> types.InlineCompletionClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['text_document.inline_completion.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['notebook_document'], default: T | None = None) -> types.NotebookDocumentClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['notebook_document.synchronization'], default: T | None = None) -> types.NotebookDocumentSyncClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['notebook_document.synchronization.dynamic_registration'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['notebook_document.synchronization.execution_summary_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['window'], default: T | None = None) -> types.WindowClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['window.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['window.show_message'], default: T | None = None) -> types.ShowMessageRequestClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['window.show_message.message_action_item'], default: T | None = None) -> types.ClientShowMessageActionItemOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['window.show_message.message_action_item.additional_properties_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['window.show_document'], default: T | None = None) -> types.ShowDocumentClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['window.show_document.support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['general'], default: T | None = None) -> types.GeneralClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['general.stale_request_support'], default: T | None = None) -> types.StaleRequestSupportOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['general.stale_request_support.cancel'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['general.stale_request_support.retry_on_content_modified'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['general.regular_expressions'], default: T | None = None) -> types.RegularExpressionsClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['general.regular_expressions.engine'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['general.regular_expressions.version'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['general.markdown'], default: T | None = None) -> types.MarkdownClientCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['general.markdown.parser'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['general.markdown.version'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['general.markdown.allowed_tags'], default: T | None = None) -> Sequence[str] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['general.position_encodings'], default: T | None = None) -> Sequence[Union[types.PositionEncodingKind, str]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ClientCapabilities, field: Literal['experimental'], default: T | None = None) -> None | Any | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['position_encoding'], default: T | None = None) -> types.PositionEncodingKind | None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['text_document_sync'], default: T | None = None) -> types.TextDocumentSyncOptions | types.TextDocumentSyncKind | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['text_document_sync.open_close'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['text_document_sync.change'], default: T | None = None) -> types.TextDocumentSyncKind | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['text_document_sync.will_save'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['text_document_sync.will_save_wait_until'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['text_document_sync.save'], default: T | None = None) -> types.SaveOptions | bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['text_document_sync.save.include_text'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['notebook_document_sync'], default: T | None = None) -> types.NotebookDocumentSyncRegistrationOptions | types.NotebookDocumentSyncOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['notebook_document_sync.notebook_selector'], default: T | None = None) -> Union[types.NotebookDocumentFilterWithNotebook, types.NotebookDocumentFilterWithCells] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['notebook_document_sync.save'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['notebook_document_sync.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['completion_provider'], default: T | None = None) -> types.CompletionOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['completion_provider.trigger_characters'], default: T | None = None) -> Sequence[str] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['completion_provider.all_commit_characters'], default: T | None = None) -> Sequence[str] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['completion_provider.resolve_provider'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['completion_provider.completion_item'], default: T | None = None) -> types.ServerCompletionItemOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['completion_provider.completion_item.label_details_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['completion_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['hover_provider'], default: T | None = None) -> types.HoverOptions | bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['hover_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['signature_help_provider'], default: T | None = None) -> types.SignatureHelpOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['signature_help_provider.trigger_characters'], default: T | None = None) -> Sequence[str] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['signature_help_provider.retrigger_characters'], default: T | None = None) -> Sequence[str] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['signature_help_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['declaration_provider'], default: T | None = None) -> types.DeclarationRegistrationOptions | types.DeclarationOptions | None | bool | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['declaration_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['declaration_provider.document_selector'], default: T | None = None) -> Sequence[Union[types.TextDocumentFilterLanguage, types.TextDocumentFilterScheme, types.TextDocumentFilterPattern, types.NotebookCellTextDocumentFilter]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['declaration_provider.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['definition_provider'], default: T | None = None) -> types.DefinitionOptions | bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['definition_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['type_definition_provider'], default: T | None = None) -> types.TypeDefinitionRegistrationOptions | types.TypeDefinitionOptions | None | bool | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['type_definition_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['type_definition_provider.document_selector'], default: T | None = None) -> Sequence[Union[types.TextDocumentFilterLanguage, types.TextDocumentFilterScheme, types.TextDocumentFilterPattern, types.NotebookCellTextDocumentFilter]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['type_definition_provider.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['implementation_provider'], default: T | None = None) -> types.ImplementationRegistrationOptions | types.ImplementationOptions | None | bool | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['implementation_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['implementation_provider.document_selector'], default: T | None = None) -> Sequence[Union[types.TextDocumentFilterLanguage, types.TextDocumentFilterScheme, types.TextDocumentFilterPattern, types.NotebookCellTextDocumentFilter]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['implementation_provider.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['references_provider'], default: T | None = None) -> types.ReferenceOptions | bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['references_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_highlight_provider'], default: T | None = None) -> types.DocumentHighlightOptions | bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_highlight_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_symbol_provider'], default: T | None = None) -> types.DocumentSymbolOptions | bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_symbol_provider.label'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_symbol_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['code_action_provider'], default: T | None = None) -> types.CodeActionOptions | bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['code_action_provider.code_action_kinds'], default: T | None = None) -> Sequence[Union[types.CodeActionKind, str]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['code_action_provider.documentation'], default: T | None = None) -> Sequence[types.CodeActionKindDocumentation] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['code_action_provider.resolve_provider'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['code_action_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['code_lens_provider'], default: T | None = None) -> types.CodeLensOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['code_lens_provider.resolve_provider'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['code_lens_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_link_provider'], default: T | None = None) -> types.DocumentLinkOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_link_provider.resolve_provider'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_link_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['color_provider'], default: T | None = None) -> types.DocumentColorRegistrationOptions | types.DocumentColorOptions | None | bool | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['color_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['color_provider.document_selector'], default: T | None = None) -> Sequence[Union[types.TextDocumentFilterLanguage, types.TextDocumentFilterScheme, types.TextDocumentFilterPattern, types.NotebookCellTextDocumentFilter]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['color_provider.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace_symbol_provider'], default: T | None = None) -> types.WorkspaceSymbolOptions | bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace_symbol_provider.resolve_provider'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace_symbol_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_formatting_provider'], default: T | None = None) -> types.DocumentFormattingOptions | bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_formatting_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_range_formatting_provider'], default: T | None = None) -> types.DocumentRangeFormattingOptions | bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_range_formatting_provider.ranges_support'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_range_formatting_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_on_type_formatting_provider'], default: T | None = None) -> types.DocumentOnTypeFormattingOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_on_type_formatting_provider.first_trigger_character'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['document_on_type_formatting_provider.more_trigger_character'], default: T | None = None) -> Sequence[str] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['rename_provider'], default: T | None = None) -> types.RenameOptions | bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['rename_provider.prepare_provider'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['rename_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['folding_range_provider'], default: T | None = None) -> types.FoldingRangeRegistrationOptions | types.FoldingRangeOptions | None | bool | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['folding_range_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['folding_range_provider.document_selector'], default: T | None = None) -> Sequence[Union[types.TextDocumentFilterLanguage, types.TextDocumentFilterScheme, types.TextDocumentFilterPattern, types.NotebookCellTextDocumentFilter]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['folding_range_provider.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['selection_range_provider'], default: T | None = None) -> types.SelectionRangeRegistrationOptions | types.SelectionRangeOptions | None | bool | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['selection_range_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['selection_range_provider.document_selector'], default: T | None = None) -> Sequence[Union[types.TextDocumentFilterLanguage, types.TextDocumentFilterScheme, types.TextDocumentFilterPattern, types.NotebookCellTextDocumentFilter]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['selection_range_provider.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['execute_command_provider'], default: T | None = None) -> types.ExecuteCommandOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['execute_command_provider.commands'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['execute_command_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['call_hierarchy_provider'], default: T | None = None) -> types.CallHierarchyRegistrationOptions | types.CallHierarchyOptions | None | bool | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['call_hierarchy_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['call_hierarchy_provider.document_selector'], default: T | None = None) -> Sequence[Union[types.TextDocumentFilterLanguage, types.TextDocumentFilterScheme, types.TextDocumentFilterPattern, types.NotebookCellTextDocumentFilter]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['call_hierarchy_provider.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['linked_editing_range_provider'], default: T | None = None) -> types.LinkedEditingRangeRegistrationOptions | types.LinkedEditingRangeOptions | None | bool | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['linked_editing_range_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['linked_editing_range_provider.document_selector'], default: T | None = None) -> Sequence[Union[types.TextDocumentFilterLanguage, types.TextDocumentFilterScheme, types.TextDocumentFilterPattern, types.NotebookCellTextDocumentFilter]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['linked_editing_range_provider.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['semantic_tokens_provider'], default: T | None = None) -> types.SemanticTokensRegistrationOptions | types.SemanticTokensOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['semantic_tokens_provider.legend'], default: T | None = None) -> types.SemanticTokensLegend | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['semantic_tokens_provider.legend.token_types'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['semantic_tokens_provider.legend.token_modifiers'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['semantic_tokens_provider.range'], default: T | None = None) -> bool | None | Any | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['semantic_tokens_provider.full'], default: T | None = None) -> types.SemanticTokensFullDelta | bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['semantic_tokens_provider.full.delta'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['semantic_tokens_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['semantic_tokens_provider.document_selector'], default: T | None = None) -> Sequence[Union[types.TextDocumentFilterLanguage, types.TextDocumentFilterScheme, types.TextDocumentFilterPattern, types.NotebookCellTextDocumentFilter]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['semantic_tokens_provider.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['moniker_provider'], default: T | None = None) -> types.MonikerRegistrationOptions | types.MonikerOptions | None | bool | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['moniker_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['moniker_provider.document_selector'], default: T | None = None) -> Sequence[Union[types.TextDocumentFilterLanguage, types.TextDocumentFilterScheme, types.TextDocumentFilterPattern, types.NotebookCellTextDocumentFilter]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['type_hierarchy_provider'], default: T | None = None) -> types.TypeHierarchyRegistrationOptions | types.TypeHierarchyOptions | None | bool | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['type_hierarchy_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['type_hierarchy_provider.document_selector'], default: T | None = None) -> Sequence[Union[types.TextDocumentFilterLanguage, types.TextDocumentFilterScheme, types.TextDocumentFilterPattern, types.NotebookCellTextDocumentFilter]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['type_hierarchy_provider.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['inline_value_provider'], default: T | None = None) -> types.InlineValueRegistrationOptions | types.InlineValueOptions | None | bool | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['inline_value_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['inline_value_provider.document_selector'], default: T | None = None) -> Sequence[Union[types.TextDocumentFilterLanguage, types.TextDocumentFilterScheme, types.TextDocumentFilterPattern, types.NotebookCellTextDocumentFilter]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['inline_value_provider.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['inlay_hint_provider'], default: T | None = None) -> types.InlayHintRegistrationOptions | types.InlayHintOptions | None | bool | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['inlay_hint_provider.resolve_provider'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['inlay_hint_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['inlay_hint_provider.document_selector'], default: T | None = None) -> Sequence[Union[types.TextDocumentFilterLanguage, types.TextDocumentFilterScheme, types.TextDocumentFilterPattern, types.NotebookCellTextDocumentFilter]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['inlay_hint_provider.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['diagnostic_provider'], default: T | None = None) -> types.DiagnosticRegistrationOptions | types.DiagnosticOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['diagnostic_provider.inter_file_dependencies'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['diagnostic_provider.workspace_diagnostics'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['diagnostic_provider.identifier'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['diagnostic_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['diagnostic_provider.document_selector'], default: T | None = None) -> Sequence[Union[types.TextDocumentFilterLanguage, types.TextDocumentFilterScheme, types.TextDocumentFilterPattern, types.NotebookCellTextDocumentFilter]] | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['diagnostic_provider.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['inline_completion_provider'], default: T | None = None) -> types.InlineCompletionOptions | bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['inline_completion_provider.work_done_progress'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace'], default: T | None = None) -> types.WorkspaceOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.workspace_folders'], default: T | None = None) -> types.WorkspaceFoldersServerCapabilities | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.workspace_folders.supported'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.workspace_folders.change_notifications'], default: T | None = None) -> bool | None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations'], default: T | None = None) -> types.FileOperationOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_create'], default: T | None = None) -> types.FileOperationRegistrationOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_create.filters'], default: T | None = None) -> types.FileOperationFilter | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_create.filters.pattern'], default: T | None = None) -> types.FileOperationPattern | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_create.filters.pattern.glob'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_create.filters.pattern.matches'], default: T | None = None) -> types.FileOperationPatternKind | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_create.filters.pattern.options'], default: T | None = None) -> types.FileOperationPatternOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_create.filters.pattern.options.ignore_case'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_create.filters.scheme'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_create'], default: T | None = None) -> types.FileOperationRegistrationOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_create.filters'], default: T | None = None) -> types.FileOperationFilter | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_create.filters.pattern'], default: T | None = None) -> types.FileOperationPattern | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_create.filters.pattern.glob'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_create.filters.pattern.matches'], default: T | None = None) -> types.FileOperationPatternKind | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_create.filters.pattern.options'], default: T | None = None) -> types.FileOperationPatternOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_create.filters.pattern.options.ignore_case'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_create.filters.scheme'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_rename'], default: T | None = None) -> types.FileOperationRegistrationOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_rename.filters'], default: T | None = None) -> types.FileOperationFilter | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_rename.filters.pattern'], default: T | None = None) -> types.FileOperationPattern | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_rename.filters.pattern.glob'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_rename.filters.pattern.matches'], default: T | None = None) -> types.FileOperationPatternKind | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_rename.filters.pattern.options'], default: T | None = None) -> types.FileOperationPatternOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_rename.filters.pattern.options.ignore_case'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_rename.filters.scheme'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_rename'], default: T | None = None) -> types.FileOperationRegistrationOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_rename.filters'], default: T | None = None) -> types.FileOperationFilter | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_rename.filters.pattern'], default: T | None = None) -> types.FileOperationPattern | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_rename.filters.pattern.glob'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_rename.filters.pattern.matches'], default: T | None = None) -> types.FileOperationPatternKind | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_rename.filters.pattern.options'], default: T | None = None) -> types.FileOperationPatternOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_rename.filters.pattern.options.ignore_case'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_rename.filters.scheme'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_delete'], default: T | None = None) -> types.FileOperationRegistrationOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_delete.filters'], default: T | None = None) -> types.FileOperationFilter | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_delete.filters.pattern'], default: T | None = None) -> types.FileOperationPattern | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_delete.filters.pattern.glob'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_delete.filters.pattern.matches'], default: T | None = None) -> types.FileOperationPatternKind | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_delete.filters.pattern.options'], default: T | None = None) -> types.FileOperationPatternOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_delete.filters.pattern.options.ignore_case'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.did_delete.filters.scheme'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_delete'], default: T | None = None) -> types.FileOperationRegistrationOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_delete.filters'], default: T | None = None) -> types.FileOperationFilter | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_delete.filters.pattern'], default: T | None = None) -> types.FileOperationPattern | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_delete.filters.pattern.glob'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_delete.filters.pattern.matches'], default: T | None = None) -> types.FileOperationPatternKind | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_delete.filters.pattern.options'], default: T | None = None) -> types.FileOperationPatternOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_delete.filters.pattern.options.ignore_case'], default: T | None = None) -> bool | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.file_operations.will_delete.filters.scheme'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.text_document_content'], default: T | None = None) -> types.TextDocumentContentRegistrationOptions | types.TextDocumentContentOptions | None | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.text_document_content.schemes'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['workspace.text_document_content.id'], default: T | None = None) -> None | str | T: ...
@typing.overload
def get_capability(capabilities: types.ServerCapabilities, field: Literal['experimental'], default: T | None = None) -> None | Any | T: ...
@typing.overload
def get_capability(capabilities: Any, field: str, default: Any | None = None) -> Any | None: ...
def get_capability(capabilities, field, default = None):
    """Return the value of some nested capability with a fallback value to use in the
       case where it does not exist."""
    try:
        value = reduce(getattr, field.split("."), capabilities)
    except AttributeError:
        return default

    return value if value is not None else default
